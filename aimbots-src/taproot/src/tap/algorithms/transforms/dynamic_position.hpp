/*****************************************************************************/
/********** !!! WARNING: CODE GENERATED BY TAPROOT. DO NOT EDIT !!! **********/
/*****************************************************************************/

/*
 * Copyright (c) 2025-2025 Advanced Robotics at the University of Washington <robomstr@uw.edu>
 *
 * This file is part of Taproot.
 *
 * Taproot is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Taproot is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Taproot.  If not, see <https://www.gnu.org/licenses/>.
 */

#ifndef TAPROOT_DYNAMIC_POSITION_HPP_
#define TAPROOT_DYNAMIC_POSITION_HPP_

#include "tap/algorithms/cmsis_mat.hpp"

#include "position.hpp"
#include "vector.hpp"

namespace tap::algorithms::transforms
{
class DynamicPosition
{
public:
    inline DynamicPosition(
        const float x,
        const float y,
        const float z,
        const float vx,
        const float vy,
        const float vz,
        const float ax,
        const float ay,
        const float az)
        : position({x, y, z}),
          velocity({vx, vy, vz}),
          acceleration({ax, ay, az})
    {
    }

    /* Costly; use rvalue reference whenever possible */
    inline DynamicPosition(
        const CMSISMat<3, 1>& position,
        const CMSISMat<3, 1>& velocity,
        const CMSISMat<3, 1>& acceleration)
        : position(position),
          velocity(velocity),
          acceleration(acceleration)
    {
    }

    inline DynamicPosition(
        CMSISMat<3, 1>&& position,
        CMSISMat<3, 1>&& velocity,
        CMSISMat<3, 1>&& acceleration)
        : position(std::move(position)),
          velocity(std::move(velocity)),
          acceleration(std::move(acceleration))
    {
    }

    DynamicPosition operator+(const DynamicPosition& other) const
    {
        return DynamicPosition(
            this->position + other.position,
            this->velocity + other.velocity,
            this->acceleration + other.acceleration);
    }

    DynamicPosition operator-(const DynamicPosition& other) const
    {
        return DynamicPosition(
            this->position - other.position,
            this->velocity - other.velocity,
            this->acceleration - other.acceleration);
    }

    DynamicPosition operator-() const
    {
        return DynamicPosition(-this->position, -this->velocity, -this->acceleration);
    }

    inline Position getPosition() const { return Position(position); }

    inline Vector getVelocity() const { return Vector(velocity); }

    inline Vector getAcceleration() const { return Vector(acceleration); }

    inline float x() const { return position.data[0]; }

    inline float y() const { return position.data[1]; }

    inline float z() const { return position.data[2]; }

    inline float vx() const { return velocity.data[0]; }

    inline float vy() const { return velocity.data[1]; }

    inline float vz() const { return velocity.data[2]; }

    inline float ax() const { return acceleration.data[0]; }

    inline float ay() const { return acceleration.data[1]; }

    inline float az() const { return acceleration.data[2]; }

    friend class Transform;

private:
    CMSISMat<3, 1> position;

    CMSISMat<3, 1> velocity;

    CMSISMat<3, 1> acceleration;

};  // class DynamicPosition
}  // namespace tap::algorithms::transforms

#endif  // TAPROOT_DYNAMIC_POSITION_HPP_
