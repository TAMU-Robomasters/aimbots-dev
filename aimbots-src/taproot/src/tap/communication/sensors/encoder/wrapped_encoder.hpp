/*****************************************************************************/
/********** !!! WARNING: CODE GENERATED BY TAPROOT. DO NOT EDIT !!! **********/
/*****************************************************************************/

/*
 * Copyright (c) 2025 Advanced Robotics at the University of Washington <robomstr@uw.edu>
 *
 * This file is part of Taproot.
 *
 * Taproot is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Taproot is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Taproot.  If not, see <https://www.gnu.org/licenses/>.
 */

#ifndef TAPROOT_WRAPPED_ENCODER_HPP_
#define TAPROOT_WRAPPED_ENCODER_HPP_

#include "tap/communication/sensors/encoder/encoder_interface.hpp"
#include "tap/util_macros.hpp"

namespace tap::encoder
{
/**
 * Represents an encoder that reports its values as a wrapped number of ticks.
 */
class WrappedEncoder : public EncoderInterface
{
public:
    /**
     * @param isInverted if `false` the positive rotation direction of the shaft is
     *      counter-clockwise when looking at the shaft from.
     *      If `true` then the positive rotation direction will be clockwise.
     * @param encoderResolution the number of encoder ticks before the value wraps.
     * @param gearRatio the ratio of input revolutions over output revolutions of this encoder.
     * @param encoderHomePosition the zero position for the encoder in encoder ticks.
     */
    WrappedEncoder(
        bool isInverted,
        uint32_t encoderResolution,
        float gearRatio = 1,
        uint32_t encoderHomePosition = 0);

    void initialize() override{};

    tap::algorithms::WrappedFloat getPosition() const override;

    /**
     * Gets the raw encoder position.
     */
    mockable tap::algorithms::WrappedFloat getEncoder() const { return encoder; }

    float getVelocity() const override;

    void alignWith(EncoderInterface* other) override;

    void resetEncoderValue() override;

    DISALLOW_COPY_AND_ASSIGN(WrappedEncoder)

#if defined(PLATFORM_HOSTED) && defined(ENV_UNIT_TESTS)
    bool isOnline() const override { return true; }
#else
protected:
#endif

    /**
     * Updates the stored encoder value given a newly received encoder value
     * special logic necessary for keeping track of unwrapped encoder value.
     */
    void updateEncoderValue(uint32_t encoderActual);

    /**
     * The current encoder position.
     */
    tap::algorithms::WrappedFloat encoder;

    /**
     * The encoder position converted into output rotations
     */
    tap::algorithms::WrappedFloat position;

    bool inverted;

    const uint32_t encoderResolution;

    const float gearRatio;

private:
    /**
     * The actual encoder wrapped value received from CAN messages where this motor
     * is considered to have an encoder value of 0. encoderHomePosition is 0 by default.
     */
    tap::algorithms::WrappedFloat encoderHomePosition;

    /**
     * The past position for the encoder. Used in velocity calculations.
     */
    tap::algorithms::WrappedFloat pastPosition;

    /**
     * The last update time for the encoder. Used in velocity calculations.
     */
    uint64_t lastUpdateTime;

    uint64_t deltaTime;
};

}  // namespace tap::encoder

#endif  // TAPROOT_WRAPPED_ENCODER_HPP_
