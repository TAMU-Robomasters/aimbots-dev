/*****************************************************************************/
/********** !!! WARNING: CODE GENERATED BY TAPROOT. DO NOT EDIT !!! **********/
/*****************************************************************************/

/*
 * Copyright (c) 2024 Advanced Robotics at the University of Washington <robomstr@uw.edu>
 *
 * This file is part of Taproot.
 *
 * Taproot is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Taproot is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Taproot.  If not, see <https://www.gnu.org/licenses/>.
 */

#ifndef TAPROOT_ENCODER_INTERFACE_HPP_
#define TAPROOT_ENCODER_INTERFACE_HPP_

#include "tap/algorithms/wrapped_float.hpp"

namespace tap::encoder
{
class EncoderInterface
{
public:
    /**
     * Initialize the encoder. For instance: attaching a can receiver.
     */
    virtual void initialize() = 0;
    /**
     * Returns true when the encoder is online and reporting valid values.
     */
    virtual bool isOnline() const = 0;
    /**
     * Zeros the encoder to its current position. All encoder positions will be based from this
     * position.
     */
    virtual void resetEncoderValue() = 0;
    /**
     * Gets the current position of the encoder, in a wrapped float on the range [0, M_TWOPI)
     */
    virtual tap::algorithms::WrappedFloat getPosition() const = 0;
    /**
     * Gets the current velocity reported by the encoder. Returned in a value of radians / second
     */
    virtual float getVelocity() const = 0;
    /**
     * Aligns this encoder to another encoder so that their positions are equal.
     * If the two encoders are mechanically linked, they would then continue to report the same
     * position.
     */
    virtual void alignWith(EncoderInterface* other) = 0;
};

}  // namespace tap::encoder

#endif  // TAPROOT_ENCODER_INTERFACE_HPP_
