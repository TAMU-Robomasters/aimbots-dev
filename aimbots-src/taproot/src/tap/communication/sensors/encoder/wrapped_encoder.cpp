/*****************************************************************************/
/********** !!! WARNING: CODE GENERATED BY TAPROOT. DO NOT EDIT !!! **********/
/*****************************************************************************/

/*
 * Copyright (c) 2025 Advanced Robotics at the University of Washington <robomstr@uw.edu>
 *
 * This file is part of Taproot.
 *
 * Taproot is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Taproot is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Taproot.  If not, see <https://www.gnu.org/licenses/>.
 */

#include "wrapped_encoder.hpp"

#include "tap/algorithms/math_user_utils.hpp"
#include "tap/architecture/clock.hpp"

namespace tap
{
namespace encoder
{
WrappedEncoder::WrappedEncoder(
    bool isInverted,
    uint32_t encoderResolution,
    float gearRatio,
    uint32_t encoderHomePosition)
    : encoder(tap::algorithms::WrappedFloat(0, 0, encoderResolution)),
      position(tap::algorithms::Angle(0)),
      inverted(isInverted),
      encoderResolution(encoderResolution),
      gearRatio(gearRatio),
      encoderHomePosition(tap::algorithms::WrappedFloat(encoderHomePosition, 0, encoderResolution)),
      pastPosition(tap::algorithms::Angle(0)),
      lastUpdateTime(0),
      deltaTime(0)
{
}

void WrappedEncoder::resetEncoderValue()
{
    encoderHomePosition = encoder + encoderHomePosition;
    encoder.setUnwrappedValue(0);
    pastPosition -= position;
    position.setUnwrappedValue(0);
}

tap::algorithms::WrappedFloat WrappedEncoder::getPosition() const
{
#if defined(PLATFORM_HOSTED) && defined(ENV_UNIT_TESTS)
    return tap::algorithms::Angle(
        this->getEncoder().getUnwrappedValue() * static_cast<float>(M_TWOPI) / encoderResolution *
        gearRatio);
#else
    return position;
#endif
}

float WrappedEncoder::getVelocity() const
{
    if (deltaTime == 0)
    {
        return 0;
    }

    return (position - pastPosition).getUnwrappedValue() / deltaTime * 1'000'000;
}

void WrappedEncoder::alignWith(EncoderInterface* other)
{
    tap::algorithms::WrappedFloat positionDifference = other->getPosition() - position;
    float offset = positionDifference.getUnwrappedValue() / static_cast<float>(M_TWOPI) *
                   encoderResolution * gearRatio;
    this->encoderHomePosition += offset;
    this->encoder += offset;
    this->position = other->getPosition();
    this->pastPosition += positionDifference;
}

void WrappedEncoder::updateEncoderValue(uint32_t encoderActual)
{
    // invert motor if necessary
    encoderActual = inverted ? encoderResolution - 1 - encoderActual : encoderActual;

    int32_t encoderRelativeToHome =
        (int32_t)encoderActual - (int32_t)encoderHomePosition.getWrappedValue();

    uint32_t newEncWrapped = encoderRelativeToHome < 0
                                 ? (int32_t)encoderResolution + encoderRelativeToHome
                                 : encoderRelativeToHome;

    if (lastUpdateTime == 0)  // The first time we get a value, want it to always be positive
    {
        encoder = tap::algorithms::WrappedFloat(newEncWrapped, 0, encoderResolution);
    }
    else
    {
        encoder += encoder.minDifference(newEncWrapped);
    }

    pastPosition = position;
    deltaTime = tap::arch::clock::getTimeMicroseconds() - lastUpdateTime;
    lastUpdateTime = tap::arch::clock::getTimeMicroseconds();
    position.setUnwrappedValue(
        encoder.getUnwrappedValue() * static_cast<float>(M_TWOPI) / encoderResolution * gearRatio);
}
}  // namespace encoder

}  // namespace tap
