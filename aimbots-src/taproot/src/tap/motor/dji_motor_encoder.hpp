/*****************************************************************************/
/********** !!! WARNING: CODE GENERATED BY TAPROOT. DO NOT EDIT !!! **********/
/*****************************************************************************/

/*
 * Copyright (c) 2024 Advanced Robotics at the University of Washington <robomstr@uw.edu>
 *
 * This file is part of Taproot.
 *
 * Taproot is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Taproot is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Taproot.  If not, see <https://www.gnu.org/licenses/>.
 */

#ifndef TAPROOT_DJI_MOTOR_ENCODER_HPP_
#define TAPROOT_DJI_MOTOR_ENCODER_HPP_

#include "tap/architecture/timeout.hpp"
#include "tap/communication/sensors/encoder/wrapped_encoder.hpp"
#include "tap/util_macros.hpp"

#include "modm/architecture/interface/can_message.hpp"
#include "modm/math/geometry/angle.hpp"

namespace tap::motor
{
/**
 * A class designed to interface with the encoder for DJI brand motors and motor controllers over
 * CAN. This includes the C610 and C620 motor controllers and the GM6020 motor (that has a built-in
 * motor controller).
 *
 * @note: the default positive rotation direction (i.e.: when `this->isMotorInverted()
 *      == false`) is counter clockwise when looking at the shaft from the side opposite
 *      the motor. This is specified in the C620 user manual (page 18).
 *
 * DJI motor encoders store a consistent encoding for a given angle across power-cycles.
 * This means the encoder angle reported by the motor can have meaning if the encoding
 * for an angle is unique as it is for the GM6020s. However for geared motors like the
 * M3508 where a full encoder revolution does not correspond 1:1 to a shaft revolution,
 * it is impossible to know the orientation of the shaft given just the encoder value.
 *
 * Combining them with some form of absolute encoder on the output shaft would give you knowledge of
 * the orientation of the output shaft.
 */
class DjiMotorEncoder : public tap::encoder::WrappedEncoder
{
public:
    // 0 - 8191 for dji motors
    static constexpr uint16_t ENC_RESOLUTION = 8192;

    // Internal gear ratio of the following motors
    static constexpr float GEAR_RATIO_M3508 = 3591.0f / 187.0f;
    static constexpr float GEAR_RATIO_GM3510_L1 = 3.7f / 1.0f;
    static constexpr float GEAR_RATIO_GM3510_L2 = 5.2f / 1.0f;
    static constexpr float GEAR_RATIO_GM3510_L3 = 19.0f / 1.0f;
    static constexpr float GEAR_RATIO_GM3510_L4 = 27.0f / 1.0f;
    static constexpr float GEAR_RATIO_M2006 = 36.0f / 1.0f;
    static constexpr float GEAR_RATIO_GM6020 = 1.0f / 1.0f;

    /**
     * @param isInverted if `false` the positive rotation direction of the shaft is
     *      counter-clockwise when looking at the shaft from.
     *      If `true` then the positive rotation direction will be clockwise.
     * @param encoderResolution the number of encoder ticks before the value wraps.
     * @param gearRatio the ratio of input revolutions to output revolutions of this encoder.
     * @param encoderHomePosition the zero position for the encoder in encoder ticks.
     */
    DjiMotorEncoder(bool isInverted, float gearRatio = 1, uint32_t encoderHomePosition = 0);

    void initialize() override{};

    bool isOnline() const override;

    float getVelocity() const override;

    /**
     * The current RPM reported by the motor controller.
     */
    mockable int16_t getShaftRPM() const;

    DISALLOW_COPY_AND_ASSIGN(DjiMotorEncoder)

    /**
     * Overrides virtual method in the can class, called every time a message with the
     * CAN message id this class is attached to is received by the can receive handler.
     * Parses the data in the message and updates this class's fields accordingly.
     *
     * @param[in] message the message to be processed.
     */
    mockable void processMessage(const modm::can::Message& message);

private:
    // wait time before the motor is considered disconnected, in milliseconds
    static const uint32_t MOTOR_DISCONNECT_TIME = 100;

    tap::arch::MilliTimeout encoderDisconnectTimeout;

    int16_t shaftRPM;
};

}  // namespace tap::motor

#endif  // TAPROOT_DJI_MOTOR_ENCODER_HPP_
