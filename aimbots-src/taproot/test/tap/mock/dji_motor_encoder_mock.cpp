/*****************************************************************************/
/********** !!! WARNING: CODE GENERATED BY TAPROOT. DO NOT EDIT !!! **********/
/*****************************************************************************/

/*
 * Copyright (c) 2024 Advanced Robotics at the University of Washington <robomstr@uw.edu>
 *
 * This file is part of Taproot.
 *
 * Taproot is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Taproot is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Taproot.  If not, see <https://www.gnu.org/licenses/>.
 */

#include "dji_motor_encoder_mock.hpp"

namespace tap::mock
{
DjiMotorEncoderMock::DjiMotorEncoderMock(
    bool isInverted,
    float gearRatio,
    uint32_t encoderHomePosition)
    : DjiMotorEncoder(isInverted, gearRatio, encoderHomePosition)
{
    ON_CALL(*this, isOnline).WillByDefault(testing::Return(true));
    ON_CALL(*this, getVelocity).WillByDefault(testing::Invoke([&]() {
        return this->DjiMotorEncoder::getVelocity();
    }));
    ON_CALL(*this, getPosition).WillByDefault(testing::Invoke([&]() {
        return this->DjiMotorEncoder::getPosition();
    }));
    ON_CALL(*this, getEncoder)
        .WillByDefault(testing::Return(tap::algorithms::WrappedFloat(0, 0, ENC_RESOLUTION)));
}

DjiMotorEncoderMock::~DjiMotorEncoderMock()
{
    ON_CALL(*this, getVelocity).WillByDefault(testing::Return(0));
    ON_CALL(*this, getPosition).WillByDefault(testing::Return(tap::algorithms::Angle(0)));
}
}  // namespace tap::mock
